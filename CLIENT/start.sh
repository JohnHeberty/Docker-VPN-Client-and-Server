#!/bin/bash

# VPN Client Startup Script
# ========================

echo "üöÄ Starting VPN Database Client..."
echo "=================================="

# Verificar se .env existe
if [ ! -f .env ]; then
    echo "‚ùå Arquivo .env n√£o encontrado!"
    echo "üìù Copie .env.example para .env e configure as vari√°veis"
    exit 1
fi

# Carregar vari√°veis do .env
source .env

# Validar configura√ß√µes essenciais
if [ -z "$VPN_SERVER_IP" ] || [ -z "$TS_AUTHKEY" ]; then
    echo "‚ùå Configura√ß√µes obrigat√≥rias n√£o definidas no .env:"
    echo "   - VPN_SERVER_IP: $VPN_SERVER_IP"
    echo "   - TS_AUTHKEY: ${TS_AUTHKEY:0:20}..."
    exit 1
fi

echo "‚úÖ Configura√ß√µes validadas"
echo "üì° VPN Server: $VPN_SERVER_IP:${VPN_SERVER_PORT:-5432}"
echo "üè† Local Port: ${LOCAL_INTERFACE:-127.0.0.1}:${LOCAL_PORT:-15432}"
echo "üîê Tailscale AuthKey: ${TS_AUTHKEY:0:20}..."

# Criar diret√≥rios se n√£o existirem
mkdir -p ts-authkey/state
mkdir -p logs

# Parar containers antigos
echo "üõë Parando containers antigos..."
docker-compose down --remove-orphans 2>/dev/null

# Iniciar servi√ßos
echo "üê≥ Iniciando containers..."
docker-compose up -d

# Aguardar inicializa√ß√£o
echo "‚è≥ Aguardando inicializa√ß√£o..."
sleep 10

# Verificar status
echo ""
echo "üìä Status dos servi√ßos:"
docker-compose ps

# Verificar VPN
echo ""
echo "üåê Verificando conex√£o VPN..."
if docker exec ts-client tailscale ip 2>/dev/null; then
    VPN_IP=$(docker exec ts-client tailscale ip 2>/dev/null)
    echo "‚úÖ VPN conectada! IP: $VPN_IP"
    
    # Testar ping no servidor
    echo "üîç Testando conectividade com servidor VPN..."
    if docker exec ts-client tailscale ping -c 1 $VPN_SERVER_IP >/dev/null 2>&1; then
        echo "‚úÖ Servidor VPN acess√≠vel via ping"
    else
        echo "‚ö†Ô∏è  Servidor VPN n√£o responde ao ping (pode estar normal)"
    fi
else
    echo "‚è≥ VPN ainda conectando... (pode levar alguns minutos)"
fi

# Verificar porta local
echo ""
echo "üîç Verificando porta local..."
sleep 2
if netstat -an 2>/dev/null | grep -q ":${LOCAL_PORT:-15432}"; then
    echo "‚úÖ Porta local ${LOCAL_PORT:-15432} est√° escutando"
elif ss -an 2>/dev/null | grep -q ":${LOCAL_PORT:-15432}"; then
    echo "‚úÖ Porta local ${LOCAL_PORT:-15432} est√° escutando"
else
    echo "‚è≥ Porta ${LOCAL_PORT:-15432} pode levar alguns segundos..."
fi

echo ""
echo "‚úÖ Cliente VPN iniciado!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "   1. Use 'docker-compose logs -f' para acompanhar os logs"
echo "   2. Conecte suas aplica√ß√µes em localhost:${LOCAL_PORT:-15432}"
echo ""
echo "üîß Exemplos de conex√£o:"
echo "   psql -h localhost -p ${LOCAL_PORT:-15432} -U usuario -d database"
echo "   mysql -h localhost -P ${LOCAL_PORT:-15432} -u usuario -p"
echo ""
echo "üîç Comandos √∫teis:"
echo "   docker exec ts-client tailscale status    # Status da VPN"
echo "   docker exec ts-client tailscale ping $VPN_SERVER_IP  # Ping no servidor"
echo "   docker-compose logs db-forwarder          # Logs do forwarder"